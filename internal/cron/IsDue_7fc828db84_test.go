// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package main

import (
	"testing"
)

// Structure for Schedule
type Schedule struct {
	Minutes    map[int]struct{}
	Hours      map[int]struct{}
	Days       map[int]struct{}
	DaysOfWeek map[int]struct{}
	Months     map[int]struct{}
}

// Structure for Moment
type Moment struct {
	Minute    int
	Hour      int
	Day       int
	DayOfWeek int
	Month     int
}

// Method to check if a moment is due
func (s *Schedule) IsDue(m *Moment) bool {
	_, minOk := s.Minutes[m.Minute]
	_, hourOk := s.Hours[m.Hour]
	_, dayOk := s.Days[m.Day]
	_, dowOk := s.DaysOfWeek[m.DayOfWeek]
	_, monthOk := s.Months[m.Month]

	return minOk && hourOk && dayOk && dowOk && monthOk
}

// TestIsDue_7fc828db84 tests the IsDue method of the Schedule struct
func TestIsDue_7fc828db84(t *testing.T) {

	// Create a new schedule with all fields populated
	schedule := &Schedule{
		Minutes:    map[int]struct{}{0: {}, 30: {}},
		Hours:      map[int]struct{}{9: {}, 17: {}},
		Days:       map[int]struct{}{1: {}, 15: {}},
		DaysOfWeek: map[int]struct{}{1: {}, 5: {}},
		Months:     map[int]struct{}{1: {}, 6: {}},
	}

	// Test case 1: All fields match
	moment := &Moment{Minute: 0, Hour: 9, Day: 1, DayOfWeek: 1, Month: 1}
	if !schedule.IsDue(moment) {
		t.Errorf("IsDue failed for moment: %+v", moment)
	} else {
		t.Log("IsDue passed for moment: ", moment)
	}

	// Test case 2: One field does not match
	moment = &Moment{Minute: 0, Hour: 9, Day: 1, DayOfWeek: 1, Month: 2}
	if schedule.IsDue(moment) {
		t.Errorf("IsDue failed for moment: %+v", moment)
	} else {
		t.Log("IsDue passed for moment: ", moment)
	}

	// Test case 3: All fields do not match
	moment = &Moment{Minute: 15, Hour: 10, Day: 2, DayOfWeek: 2, Month: 3}
	if schedule.IsDue(moment) {
		t.Errorf("IsDue failed for moment: %+v", moment)
	} else {
		t.Log("IsDue passed for moment: ", moment)
	}
}
