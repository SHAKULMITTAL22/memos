// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package cron

import (
	"sync"
	"testing"
)

type Cron struct {
	sync.RWMutex
	jobs []string
}

// TestTotal_174bc97db2 tests the Total method of the Cron struct
func TestTotal_174bc97db2(t *testing.T) {
	
	// Test case 1: when there are no jobs
	cron1 := &Cron{}
	if total := cron1.Total(); total != 0 {
		t.Errorf("Total() = %d; want 0", total)
	} else {
		t.Logf("Success: Total() = %d; want 0", total)
	}

	// Test case 2: when there is one job
	cron2 := &Cron{
		jobs: []string{"job1"},
	}
	if total := cron2.Total(); total != 1 {
		t.Errorf("Total() = %d; want 1", total)
	} else {
		t.Logf("Success: Total() = %d; want 1", total)
	}

	// Test case 3: when there are multiple jobs
	cron3 := &Cron{
		jobs: []string{"job1", "job2", "job3"},
	}
	if total := cron3.Total(); total != 3 {
		t.Errorf("Total() = %d; want 3", total)
	} else {
		t.Logf("Success: Total() = %d; want 3", total)
	}
}

// Total method of Cron struct
func (c *Cron) Total() int {
	c.RLock()
	defer c.RUnlock()

	return len(c.jobs)
}
