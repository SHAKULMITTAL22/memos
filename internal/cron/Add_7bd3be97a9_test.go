// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package cron

import (
	"testing"
	"sync"
	"time"

	"github.com/pkg/errors"
)

// TestAdd_7bd3be97a9 tests the Add method in the Cron struct
func TestAdd_7bd3be97a9(t *testing.T) {
	c := &Cron{
		jobs: make(map[string]*job),
		mu:   new(sync.Mutex),
	}

	// Test case: Successful addition of a job
	err := c.Add("job1", "0 0 * * *", func() { t.Log("job1 is running") })
	if err != nil {
		t.Errorf("Failed to add job1: %s", err)
	} else {
		t.Log("Successfully added job1")
	}

	// Test case: Adding a job with a nil function
	err = c.Add("job2", "0 0 * * *", nil)
	if err == nil {
		t.Error("Expected an error when adding a job with a nil function, but got none")
	} else {
		t.Logf("Successfully caught an error when adding a job with a nil function: %s", err)
	}

	// Test case: Adding a job with an invalid cron expression
	err = c.Add("job3", "invalid_cron_expression", func() { t.Log("job3 is running") })
	if err == nil {
		t.Error("Expected an error when adding a job with an invalid cron expression, but got none")
	} else {
		t.Logf("Successfully caught an error when adding a job with an invalid cron expression: %s", err)
	}

	// Test case: Adding a job with an ID that's already in use
	err = c.Add("job1", "0 0 * * *", func() { t.Log("job1 (duplicate) is running") })
	if err == nil {
		t.Error("Expected an error when adding a job with an ID that's already in use, but got none")
	} else {
		t.Logf("Successfully caught an error when adding a job with an ID that's already in use: %s", err)
	}
}
