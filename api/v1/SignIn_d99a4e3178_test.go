// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package v1

import (
	"bytes"
	"context"
	"encoding/json"
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/labstack/echo/v4"
	"github.com/stretchr/testify/assert"
	"github.com/usememos/memos/plugin/idp"
)

func TestSignIn_d99a4e3178(t *testing.T) {
	// Test case 1: Successful sign in
	t.Run("successful sign in", func(t *testing.T) {
		store := &MockStore{}
		service := &APIV1Service{Store: store}

		signIn := &SignIn{
			Username: "testUser",
			Password: "testPassword",
		}
		body, _ := json.Marshal(signIn)
		req := httptest.NewRequest(http.MethodPost, "/signin", bytes.NewReader(body))
		rec := httptest.NewRecorder()
		c := echo.New().NewContext(req, rec)

		err := service.SignIn(c)
		assert.Nil(t, err)
		assert.Equal(t, http.StatusOK, rec.Code)
	})

	// Test case 2: Disabled password login
	t.Run("disabled password login", func(t *testing.T) {
		store := &MockStore{}
		service := &APIV1Service{Store: store}

		signIn := &SignIn{
			Username: "testUser",
			Password: "testPassword",
		}
		body, _ := json.Marshal(signIn)
		req := httptest.NewRequest(http.MethodPost, "/signin", bytes.NewReader(body))
		rec := httptest.NewRecorder()
		c := echo.New().NewContext(req, rec)

		store.SetSystemSetting(context.Background(), &store.FindSystemSetting{
			Name: SystemSettingDisablePasswordLoginName.String(),
			Value: "true",
		})

		err := service.SignIn(c)
		assert.NotNil(t, err)
		assert.Equal(t, http.StatusUnauthorized, rec.Code)
	})

	// Test case 3: Incorrect login credentials
	t.Run("incorrect login credentials", func(t *testing.T) {
		store := &MockStore{}
		service := &APIV1Service{Store: store}

		signIn := &SignIn{
			Username: "testUser",
			Password: "wrongPassword",
		}
		body, _ := json.Marshal(signIn)
		req := httptest.NewRequest(http.MethodPost, "/signin", bytes.NewReader(body))
		rec := httptest.NewRecorder()
		c := echo.New().NewContext(req, rec)

		err := service.SignIn(c)
		assert.NotNil(t, err)
		assert.Equal(t, http.StatusUnauthorized, rec.Code)
	})
}
