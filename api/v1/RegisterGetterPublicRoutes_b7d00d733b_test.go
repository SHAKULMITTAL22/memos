// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package v1

import (
	"net/http"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/labstack/echo/v4"
	"github.com/stretchr/testify/assert"
)

// TestRegisterGetterPublicRoutes_b7d00d733b tests the registerGetterPublicRoutes method of the APIV1Service type
func TestRegisterGetterPublicRoutes_b7d00d733b(t *testing.T) {
	// Create a new instance of Echo
	e := echo.New()

	// Create a new APIV1Service
	service := new(APIV1Service)

	// Register the public routes
	service.registerGetterPublicRoutes(e.Group("/"))

	// Test GET /get/httpmeta
	t.Run("GET /get/httpmeta", func(t *testing.T) {
		req := httptest.NewRequest(http.MethodGet, "/get/httpmeta?url=https://example.com", nil)
		rec := httptest.NewRecorder()
		context := e.NewContext(req, rec)
		if assert.NoError(t, e.Router().Find(http.MethodGet, "/get/httpmeta?url=https://example.com", context)) {
			assert.Equal(t, http.StatusOK, rec.Code)
		} else {
			t.Log("Failed to get website metadata", "URL: https://example.com")
		}
	})

	// Test GET /get/image
	t.Run("GET /get/image", func(t *testing.T) {
		req := httptest.NewRequest(http.MethodGet, "/get/image?url=https://example.com/image.jpg", nil)
		rec := httptest.NewRecorder()
		context := e.NewContext(req, rec)
		if assert.NoError(t, e.Router().Find(http.MethodGet, "/get/image?url=https://example.com/image.jpg", context)) {
			assert.Equal(t, http.StatusOK, rec.Code)
		} else {
			t.Log("Failed to get image", "URL: https://example.com/image.jpg")
		}
	})
}
