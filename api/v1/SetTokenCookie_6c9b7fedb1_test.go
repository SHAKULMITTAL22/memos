// Test generated by RoostGPT for test math-go using AI Type Open AI and AI Model gpt-4

package v1

import (
	"net/http"
	"net/http/httptest"
	"testing"
	"time"

	"github.com/labstack/echo/v4"
)

// TestSetTokenCookie_6c9b7fedb1 tests the setTokenCookie function
func TestSetTokenCookie_6c9b7fedb1(t *testing.T) {
	e := echo.New()

	// Test case 1: Valid cookie
	t.Run("valid cookie", func(t *testing.T) {
		req := httptest.NewRequest(http.MethodGet, "/", nil)
		rec := httptest.NewRecorder()
		c := e.NewContext(req, rec)

		setTokenCookie(c, "test", "token", time.Now().Add(24*time.Hour))

		cookie := rec.Result().Cookies()[0]
		if cookie.Name != "test" || cookie.Value != "token" {
			t.Errorf("Expected cookie name 'test' and value 'token', but got '%s' and '%s'", cookie.Name, cookie.Value)
		} else {
			t.Log("Test case 'valid cookie' passed")
		}
	})

	// Test case 2: Expired cookie
	t.Run("expired cookie", func(t *testing.T) {
		req := httptest.NewRequest(http.MethodGet, "/", nil)
		rec := httptest.NewRecorder()
		c := e.NewContext(req, rec)

		setTokenCookie(c, "test", "token", time.Now().Add(-24*time.Hour))

		cookie := rec.Result().Cookies()[0]
		if !cookie.Expires.Before(time.Now()) {
			t.Errorf("Expected cookie to be expired, but it expires at '%s'", cookie.Expires)
		} else {
			t.Log("Test case 'expired cookie' passed")
		}
	})
}
